openapi: 3.0.3
info:
  title: QRPay API
  version: 2.0.0
  description: |
    The QRPay public API enables consumer and merchant applications to access
    account information, manage profiles, and initiate financial operations.

    This specification follows the `v2` service surface and is generated from
    the Laravel routes that back the mobile and web applications. All responses
    are JSON encoded and use standard HTTP status codes. Unless noted otherwise,
    endpoints expect and return UTF-8 encoded data.
  contact:
    name: QRPay Engineering
    url: https://qrpay.example.com/developer
servers:
  - url: https://api.qrpay.example.com/v2
    description: Production
  - url: https://sandbox.qrpay.example.com/v2
    description: Sandbox
  - url: https://{host}/api
    description: Local development
    variables:
      host:
        default: localhost
        description: Base hostname for a local Laravel instance
tags:
  - name: Configuration
    description: Application bootstrap and metadata
  - name: Authentication
    description: User registration and login flows
  - name: User
    description: Authenticated user resources
  - name: Notifications
    description: Event notifications for the authenticated user
paths:
  /get/basic/data:
    get:
      tags:
        - Configuration
      summary: Retrieve application bootstrap data
      description: |
        Returns the localized settings that the mobile applications need during
        the onboarding flow, including available countries, KYC requirements and
        feature toggles. The endpoint does not require authentication and is
        cached by upstream gateways.
      operationId: getBasicData
      responses:
        '200':
          description: Basic configuration payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicDataResponse'
  /user/register:
    post:
      tags:
        - Authentication
      summary: Register a new user account
      description: |
        Creates a new end-user account. Registrations may require an OTP
        challenge depending on administrative configuration. Clients should call
        `POST /user/register/check/exist` prior to this endpoint to validate that
        the email address is available.
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResponse'
        '400':
          description: Validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
  /user/login:
    post:
      tags:
        - Authentication
      summary: Authenticate with email and password
      description: |
        Exchanges user credentials for a personal access token. The access token
        must be sent in the `Authorization: Bearer` header when requesting
        protected resources.
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSuccessResponse'
        '401':
          description: Incorrect credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user/logout:
    get:
      tags:
        - Authentication
      summary: Invalidate the current access token
      description: Revokes the current access token and clears all device level sessions.
      operationId: logoutUser
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout confirmed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /user/dashboard:
    get:
      tags:
        - User
      summary: Retrieve aggregated account overview
      description: Returns balance information, shortcut actions and recent transaction summaries.
      operationId: getUserDashboard
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Account dashboard data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DashboardResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /user/profile:
    get:
      tags:
        - User
      summary: Fetch profile details for the authenticated user
      operationId: getUserProfile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Profile data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /user/profile/update:
    post:
      tags:
        - User
      summary: Update profile attributes
      description: Updates editable profile fields for the authenticated user.
      operationId: updateUserProfile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdateRequest'
      responses:
        '200':
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationErrorResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /user/notifications:
    get:
      tags:
        - Notifications
      summary: List notifications for the authenticated user
      operationId: listUserNotifications
      security:
        - BearerAuth: []
      parameters:
        - $ref: '#/components/parameters/PageParameter'
        - $ref: '#/components/parameters/PerPageParameter'
      responses:
        '200':
          description: A paginated list of notifications
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    PageParameter:
      name: page
      in: query
      description: Page number to return
      required: false
      schema:
        type: integer
        minimum: 1
        default: 1
    PerPageParameter:
      name: per_page
      in: query
      description: Number of records to return per page
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 15
  responses:
    UnauthorizedError:
      description: Authentication credentials were missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  schemas:
    MessageResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Operation completed successfully
      required:
        - success
        - message
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Authentication failed.
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
      required:
        - success
        - message
    ValidationErrorResponse:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          example:
            success: false
            message: Validation error
            errors:
              email:
                - The email field is required.
    AuthSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Logged in successfully.
        data:
          type: object
          properties:
            token:
              type: string
              description: Personal access token
            token_type:
              type: string
              example: Bearer
            expires_in:
              type: integer
              description: Expiration time in seconds
            user:
              $ref: '#/components/schemas/UserSummary'
      required:
        - success
        - data
    BasicDataResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
          properties:
            email_verification:
              type: boolean
            kyc_verification:
              type: boolean
            mobile_code:
              type: string
              example: "+880"
            register_kyc_fields:
              type: object
              additionalProperties: true
            countries:
              type: array
              items:
                type: string
      required:
        - success
        - data
    DashboardResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Dashboard data fetched successfully.
        data:
          type: object
          properties:
            balance:
              type: number
              format: float
            currency:
              type: string
              example: USD
            recent_transactions:
              type: array
              items:
                $ref: '#/components/schemas/TransactionSummary'
            shortcuts:
              type: array
              items:
                $ref: '#/components/schemas/ShortcutAction'
      required:
        - success
        - data
    ProfileResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          $ref: '#/components/schemas/UserProfile'
      required:
        - success
        - data
    NotificationListResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: array
          items:
            $ref: '#/components/schemas/Notification'
        meta:
          $ref: '#/components/schemas/PaginationMeta'
      required:
        - success
        - data
    PaginationMeta:
      type: object
      properties:
        current_page:
          type: integer
        per_page:
          type: integer
        total:
          type: integer
        last_page:
          type: integer
      required:
        - current_page
        - per_page
        - total
        - last_page
    Notification:
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
          example: transaction
        title:
          type: string
        message:
          type: string
        read_at:
          type: string
          format: date-time
          nullable: true
        created_at:
          type: string
          format: date-time
      required:
        - id
        - type
        - title
        - message
        - created_at
    UserSummary:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
          nullable: true
      required:
        - id
        - name
        - email
    UserProfile:
      allOf:
        - $ref: '#/components/schemas/UserSummary'
        - type: object
          properties:
            address:
              type: string
              nullable: true
            city:
              type: string
              nullable: true
            state:
              type: string
              nullable: true
            country:
              type: string
              nullable: true
            postal_code:
              type: string
              nullable: true
            kyc_status:
              type: string
              enum:
                - pending
                - approved
                - rejected
    TransactionSummary:
      type: object
      properties:
        id:
          type: integer
        type:
          type: string
          example: add_money
        amount:
          type: number
          format: float
        currency:
          type: string
          example: USD
        status:
          type: string
          example: completed
        created_at:
          type: string
          format: date-time
      required:
        - id
        - type
        - amount
        - currency
        - status
        - created_at
    ShortcutAction:
      type: object
      properties:
        code:
          type: string
          example: send_money
        title:
          type: string
        description:
          type: string
          nullable: true
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        device_name:
          type: string
          description: User provided identifier for the consuming device
      required:
        - email
        - password
        - device_name
    RegisterRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        phone:
          type: string
        password:
          type: string
          format: password
        password_confirmation:
          type: string
          format: password
      required:
        - name
        - email
        - password
        - password_confirmation
    ProfileUpdateRequest:
      type: object
      properties:
        name:
          type: string
        phone:
          type: string
        address:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
        postal_code:
          type: string
      additionalProperties: false
